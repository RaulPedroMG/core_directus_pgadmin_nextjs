services:
  app:
    build:
      context: ../..
      dockerfile: docker/shipfree_dev/Dockerfile
    ports:
      - "${APP_PORT_DEV}:${APP_INTERNAL_PORT}"
    env_file:
      - ../../.env.dev
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - NEXT_PUBLIC_DIRECTUS_URL=${NEXT_PUBLIC_DIRECTUS_URL}
      - DIRECTUS_INTERNAL_URL=${DIRECTUS_INTERNAL_URL}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - LEMON_SQUEEZY_API_KEY=${LEMON_SQUEEZY_API_KEY}
      - LEMON_SQUEEZY_STORE_ID=${LEMON_SQUEEZY_STORE_ID}
      - LEMON_SQUEEZY_WEBHOOK_SECRET=${LEMON_SQUEEZY_WEBHOOK_SECRET}
      - MAILGUN_API_KEY=${MAILGUN_API_KEY}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN}
      - MAILGUN_FROM_EMAIL=${MAILGUN_FROM_EMAIL}
      - MAILGUN_SIGNING_KEY=${MAILGUN_SIGNING_KEY}
      - HUSKY=${HUSKY}
    volumes:
      - ../../:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:17.6-alpine
    env_file:
      - ../../.env.dev
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER_DB_CREATE_PRIVILEGE=true
    ports:
      - "${POSTGRES_PORT_DEV}:${POSTGRES_INTERNAL_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

    # OPTIONAL
  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ../../.env.dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT_DEV}:${PGADMIN_INTERNAL_PORT}"
    depends_on:
      - postgres

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer_shipfree
    ports:
      - "${PORTAINER_PORT_DEV}:${PORTAINER_INTERNAL_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  portainer_data:
